{
	"nodes":[
		{"id":"add54eb1e92080f2","type":"text","text":"```\n     img = cv2.imread(image_path)\n     if img is None:\n\t\t print(f\"Error: Could not read image {image_path}\")\n         return []\n```","x":-1189,"y":-113,"width":655,"height":198},
		{"id":"7a2dc7ce8c0ac31e","type":"text","text":"```\n     gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n```","x":-503,"y":-101,"width":653,"height":174},
		{"id":"18097da95025a45e","type":"text","text":"```\n     thresh = cv2.adaptiveThreshold(blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\n                                    cv2.THRESH_BINARY_INV, 9, 2)\n```","x":874,"y":-89,"width":806,"height":174},
		{"id":"ddd262a4b5ba4360","type":"text","text":"가우시안 블러 적용","x":439,"y":-241,"width":250,"height":60},
		{"id":"278e5195b849f6d5","type":"text","text":"적응형 임계값 처리","x":1062,"y":-241,"width":250,"height":60},
		{"id":"f513547ead205c88","type":"text","text":"형태학적 연산","x":1840,"y":-241,"width":250,"height":60},
		{"id":"fba3fc21a51812f0","type":"text","text":"윤곽선 정렬","x":-210,"y":390,"width":250,"height":60},
		{"id":"d9dd3b426d865161","type":"text","text":"윤곽선 찾기","x":-986,"y":377,"width":250,"height":60},
		{"id":"c652c014aebee36f","type":"text","text":"```\n     kernel = np.ones((2,2), np.uint8)\n     morph = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)\n     morph = cv2.morphologyEx(morph, cv2.MORPH_OPEN, kernel)\n```","x":1762,"y":-101,"width":653,"height":174},
		{"id":"d77a697fff294405","type":"text","text":"```\n     blurred = cv2.GaussianBlur(gray, (3, 3), 0)\n```","x":280,"y":-89,"width":513,"height":174},
		{"id":"93462c59aff138cd","type":"text","text":"```\n     contours, _ = cv2.findContours(morph, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n```","x":-1265,"y":520,"width":806,"height":174},
		{"id":"23314e9443f7b1a1","type":"text","text":"```\n     sorted_contours = sorted(contours, key=lambda c: cv2.boundingRect(c)[0])\n\n```","x":-367,"y":520,"width":806,"height":174},
		{"id":"1f7d33c45cb93951","type":"text","text":"윤곽성 병합","x":624,"y":390,"width":250,"height":60},
		{"id":"f772ec41e1b92c7a","type":"text","text":"```\n     # 윤곽선 병합을 위한 거리 임계값\n     merge_distance_threshold = 1\n\n     # 병합된 윤곽선을 저장할 리스트\n     merged_contours = [] \n\n     for contour in sorted_contours:\n         area = cv2.contourArea(contour)\n         if area < min_area or area > max_area:  # Skip very small or very large contours\n             continue\n\n         # 기존 윤곽선과의 거리 계산 및 병합\n         merged = False\n         for i, m_contour in enumerate(merged_contours):\n             # 두 윤곽선의 중심점 거리 계산\n             m_x, m_y, m_w, m_h = cv2.boundingRect(m_contour)\n             c_x, c_y, c_w, c_h = cv2.boundingRect(contour)\n             distance = np.sqrt((m_x - c_x) ** 2 + (m_y - c_y) ** 2)\n\n             if distance < merge_distance_threshold:\n                 # 윤곽선 병합\n                 merged_contours[i] = np.vstack((m_contour, contour))\n                 merged = True\n                 break\n\n         if not merged:\n             merged_contours.append(contour)\n\n```","x":506,"y":520,"width":806,"height":800},
		{"id":"5dd2950151b50775","type":"text","text":"이미지 읽기","x":-1000,"y":-248,"width":250,"height":60},
		{"id":"5902468cd430da4d","type":"text","text":"그레일 스케일 변환","x":-301,"y":-241,"width":250,"height":60},
		{"id":"fdb9d67f64ded0e5","type":"text","text":"이미지의 노이즈를 줄이고, 객체의 경계를 더 명확하게 만들어 윤곽선을 찾는 데 도움을 줍니다.","x":1762,"y":100,"width":653,"height":60},
		{"id":"fde2606eb265b26e","type":"text","text":"바운딩 박스 계산 및 이미지 자르기","x":1637,"y":373,"width":250,"height":60},
		{"id":"0c78bc6ce75460cc","type":"text","text":"```\n     for m_contour in merged_contours:\n         x, y, w, h = cv2.boundingRect(m_contour)\n         # Calculate aspect ratio\n         aspect_ratio = float(w) / h\n         # Filter based on aspect ratio (typical for numbers)\n         if not (0.2 < aspect_ratio < 1.5):\n             continue\n         # Add padding\n         padding = 5  # Reduced padding\n         x1 = max(0, x - padding)\n         y1 = max(0, y - padding)\n         x2 = min(width, x + w + padding)\n         y2 = min(height, y + h + padding)\n         # Crop the object\n         cropped = img[y1:y2, x1:x2]\n         # Calculate fill ratio (ratio of foreground pixels to bounding box area)\n         mask = morph[y:y+h, x:x+w]\n         fill_ratio = cv2.countNonZero(mask) / float(w * h)\n         # Filter based on fill ratio (numbers typically have specific fill ratios)\n         if 0.1 < fill_ratio < 0.7:\n             cropped_numbers.append(cropped)\n             y_coordinates.append((y1, y2))  # y 좌표 추가\n\n```","x":1400,"y":533,"width":806,"height":640},
		{"id":"7bf8d18014f0394c","type":"text","text":"```\n      return list(zip(cropped_numbers, y_coordinates))\n\n```","x":2602,"y":533,"width":806,"height":174},
		{"id":"3477a4fb0e5b06da","type":"text","text":"결과 반환","x":2908,"y":373,"width":250,"height":60},
		{"id":"3260e4bba990b67e","type":"file","file":"Source/debug_question_12_1341_1447___3___0.jpg","x":2300,"y":2080,"width":400,"height":228},
		{"id":"70cdee59b0a84b88","type":"file","file":"Source/debug_question_12_1341_1447___4___0.jpg","x":2760,"y":2080,"width":400,"height":228},
		{"id":"42528cee76687c23","type":"file","file":"Source/debug_question_12_1341_1447___4___1.jpg","x":3200,"y":2080,"width":400,"height":228},
		{"id":"d7ccfdff765e8936","type":"file","file":"Source/debug_question_12_1341_1447___5___0.jpg","x":3660,"y":2080,"width":400,"height":228},
		{"id":"4e76abeee4c87fda","type":"file","file":"Source/debug_question_12_1341_1447___5___1.jpg","x":4140,"y":2080,"width":400,"height":228},
		{"id":"ba1236cbdf3fbd81","type":"file","file":"Source/debug_question_12_1341_1447___5___2.jpg","x":4600,"y":2080,"width":400,"height":228},
		{"id":"645f87aa36d36592","type":"file","file":"Source/debug_question_12_1341_1447___6___0.jpg","x":2300,"y":2700,"width":400,"height":228},
		{"id":"d48fed43ac94dced","type":"file","file":"Source/debug_question_12_1341_1447___6___1.jpg","x":2760,"y":2700,"width":400,"height":228},
		{"id":"3fd788dbccca2323","type":"file","file":"Source/debug_question_12_1341_1447___6___2.jpg","x":3200,"y":2700,"width":400,"height":228},
		{"id":"2f7c599460bfa704","type":"file","file":"Source/debug_question_12_1341_1447___6___3.jpg","x":3660,"y":2700,"width":400,"height":228},
		{"id":"07862eebd6c7ce15","type":"text","text":"debug_question_5_407_520___3___0.jpg: distance = 23.04886114323222, merge_distance_threshold = 30\ndebug_question_5_407_520___4___0.jpg: distance = 6.519202405202649, merge_distance_threshold = 30\ndebug_question_5_407_520___5___0.jpg: distance = 18.601075237738275, merge_distance_threshold = 30\ndebug_question_5_407_520___6___0.jpg: distance = 33.94849039353591, merge_distance_threshold = 30\nNo numbers found in /home/jdh251425/2025_DKU_Capstone/AI/Algorithm/OCR/cropped_datasets/cropped_images_question_number/question_5_407_520.jpg![[Pasted image 20250412195700.png]]","x":3077,"y":3081,"width":1103,"height":199},
		{"id":"bca942864d4a4882","type":"file","file":"Source/Pasted image 20250412195702.png","x":4160,"y":453,"width":680,"height":1027},
		{"id":"90e816e1ba100af2","type":"file","file":"Source/Pasted image 20250412195711.png","x":3960,"y":453,"width":80,"height":1049}
	],
	"edges":[]
}